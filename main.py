# bot
import telebot
from models import predict_pois, predict_xgb, predict_lgb, clubs

BOT_TOKEN = "7905350226:AAHRfxW62hDGl9_K1aZMNbMXvPPpIEZM_9k"
bot = telebot.TeleBot(BOT_TOKEN)

user_state = {}  # –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –º–æ–¥–µ–ª—å


@bot.message_handler(commands=["start", "predict"])
def start(message):
    text = "–í—ã–±–µ—Ä–∏ –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É :"
    if message.text == "/start":
        text = "–ü—Ä–∏–≤–µ—Ç, –ª—é–±–∏—Ç–µ–ª—å –∞–∑–∞—Ä—Ç–∞! ü§†" + text
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for club in clubs:
        markup.add(club)
    bot.send_message(message.chat.id, text, reply_markup=markup)
    user_state[message.chat.id] = {}


@bot.message_handler(func=lambda m: m.chat.id in user_state and "home" not in user_state[m.chat.id])
def select_home(message):
    if message.text not in clubs:
        return bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    user_state[message.chat.id]["home"] = message.text
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for club in clubs:
        if club != message.text:
            markup.add(club)
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É :", reply_markup=markup)


@bot.message_handler(func=lambda m: m.chat.id in user_state and "home" in user_state[m.chat.id] and "away" not in user_state[m.chat.id])
def select_away(message):
    if message.text not in clubs:
        return bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    user_state[message.chat.id]["away"] = message.text
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add("Poisson", "XGBoost", "LightGBM")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è :", reply_markup=markup)


@bot.message_handler(func=lambda m: m.chat.id in user_state and "away" in user_state[m.chat.id])
def select_model(message):
    tag_map = {"Poisson": "pois", "XGBoost": "xgb", "LightGBM": "lgb"}
    if message.text not in tag_map:
        return bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –º–æ–¥–µ–ª–µ–π: Poisson, XGBoost –∏–ª–∏ LightGBM.")
    state = user_state[message.chat.id]
    state["model"] = tag_map[message.text]

    home, away, model = state["home"], state["away"], state["model"]
    pred_func = {"pois": predict_pois, "xgb": predict_xgb, "lgb": predict_lgb}[model]
    pred = pred_func(home, away)

    winner = home if pred["HW"] > max(pred["D"], pred["AW"]) else (
        away if pred["AW"] > max(pred["HW"], pred["D"]) else "–ù–∏—á—å—è")

    response = (
        f"üèü –ú–∞—Ç—á: {home} vs {away}\n"
        f"\n‚öΩ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n"
        f"  {home}: {pred['HG']} –≥–æ–ª(–æ–≤)\n"
        f"  {away}: {pred['AG']} –≥–æ–ª(–æ–≤)\n"
        f"\nüìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n"
        f"  –ü–æ–±–µ–¥–∞ {home}: {pred['HW']:.2%}\n"
        f"  –ù–∏—á—å—è: {pred['D']:.2%}\n"
        f"  –ü–æ–±–µ–¥–∞ {away}: {pred['AW']:.2%}\n"
        f"\n‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}üéâ\n"
        f"üìà –ú–æ–¥–µ–ª—å: {message.text}"
    )

    bot.send_message(message.chat.id, response)
    # user_state.pop(message.chat.id, None)  # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

bot.polling()